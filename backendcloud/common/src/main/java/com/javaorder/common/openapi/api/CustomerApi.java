/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.javaorder.common.openapi.api;

import com.javaorder.common.openapi.model.CreateOrderRequest;
import com.javaorder.common.openapi.model.Error;
import com.javaorder.common.openapi.model.Order;
import com.javaorder.common.openapi.utils.ApiUtil;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-02-17T10:24:11.654393+08:00[Asia/Shanghai]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "customer", description = "the customer API")
public interface CustomerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /customer/{customerID}/orders/{orderID}
     * get order
     *
     * @param customerID  (required)
     * @param orderID  (required)
     * @return Order found (status code 200)
     *         or Order not found (status code 200)
     */
    @Operation(
        operationId = "customerCustomerIDOrdersOrderIDGet",
        description = "get order",
        responses = {
            @ApiResponse(responseCode = "200", description = "Order found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))
            }),
            @ApiResponse(responseCode = "default", description = "Order not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customer/{customerID}/orders/{orderID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Order> customerCustomerIDOrdersOrderIDGet(
        @Parameter(name = "customerID", description = "", required = true, in = ParameterIn.PATH) @PathVariable("customerID") String customerID,
        @Parameter(name = "orderID", description = "", required = true, in = ParameterIn.PATH) @PathVariable("orderID") String orderID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"customerID\" : \"customerID\", \"id\" : \"id\", \"paymentLink\" : \"paymentLink\", \"items\" : [ { \"quantity\" : 0, \"name\" : \"name\", \"id\" : \"id\", \"priceID\" : \"priceID\" }, { \"quantity\" : 0, \"name\" : \"name\", \"id\" : \"id\", \"priceID\" : \"priceID\" } ], \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /customer/{customerID}/orders
     * create order
     *
     * @param customerID  (required)
     * @param createOrderRequest  (required)
     * @return Order created (status code 200)
     *         or Order not created (status code 200)
     */
    @Operation(
        operationId = "customerCustomerIDOrdersPost",
        description = "create order",
        responses = {
            @ApiResponse(responseCode = "200", description = "Order created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Order.class))
            }),
            @ApiResponse(responseCode = "default", description = "Order not created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/customer/{customerID}/orders",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Order> customerCustomerIDOrdersPost(
        @Parameter(name = "customerID", description = "", required = true, in = ParameterIn.PATH) @PathVariable("customerID") String customerID,
        @Parameter(name = "CreateOrderRequest", description = "", required = true) @Valid @RequestBody CreateOrderRequest createOrderRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"customerID\" : \"customerID\", \"id\" : \"id\", \"paymentLink\" : \"paymentLink\", \"items\" : [ { \"quantity\" : 0, \"name\" : \"name\", \"id\" : \"id\", \"priceID\" : \"priceID\" }, { \"quantity\" : 0, \"name\" : \"name\", \"id\" : \"id\", \"priceID\" : \"priceID\" } ], \"status\" : \"status\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
